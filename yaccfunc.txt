nano file.l
lex file.l
nano file.y
yacc -d file.y
gcc lex.yy.c y.tab.c
./a.out


file.l->


%{
#include "y.tab.h"
#include <string.h>
%}

%%

[0-9]+\.[0-9]+      { yylval.fval = atof(yytext); return FLOAT; }
[0-9]+              { yylval.fval = atof(yytext); return FLOAT; }
\"[^\"]+\"          { yylval.str = strdup(yytext); return STRING_LITERAL; }
[a-zA-Z_][a-zA-Z0-9_]*  { yylval.str = strdup(yytext); return IDENTIFIER; }

"="                 { return '='; }
"("                 { return '('; }
")"                 { return ')'; }
","                 { return ','; }
[ \t\n]+            ; // skip whitespace
.                   { return yytext[0]; }

%%
int yywrap() { return 1; }


   file.y->



%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int yylex(void);
int yyerror(char *s);
%}

%union {
    double fval;
    char* str;
}

%token <fval> FLOAT
%token <str> STRING_LITERAL
%token <str> IDENTIFIER

%type <fval> expr func_call
%type <str> string

%left '+' '-'
%left '*' '/'
%right UMINUS
%%

input:
    IDENTIFIER '=' expr        { printf("%s = %.2f\n", $1, $3); free($1); }
  | IDENTIFIER '=' string      { printf("%s = \"%s\" (Length = %lu)\n", $1, $3, strlen($3)); free($1); free($3); }
  ;

expr:
    expr '+' expr              { $$ = $1 + $3; }
  | expr '-' expr              { $$ = $1 - $3; }
  | expr '*' expr              { $$ = $1 * $3; }
  | expr '/' expr              { $$ = $1 / $3; }
  | '-' expr %prec UMINUS      { $$ = -$2; }
  | '(' expr ')'               { $$ = $2; }
  | FLOAT                      { $$ = $1; }
  | func_call                  { $$ = $1; }
  ;

func_call:
    IDENTIFIER '(' expr ')' {
        if (strcmp($1, "sqrt") == 0) $$ = sqrt($3);
        else if (strcmp($1, "sin") == 0) $$ = sin($3);
        else if (strcmp($1, "cos") == 0) $$ = cos($3);
        else if (strcmp($1, "log") == 0) $$ = log($3);
        else {
            yyerror("Unknown function");
            $$ = 0;
        }
        free($1);
    }
  | IDENTIFIER '(' expr ',' expr ')' {
        if (strcmp($1, "pow") == 0) $$ = pow($3, $5);
        else {
            yyerror("Unknown function with two args");
            $$ = 0;
        }
        free($1);
    }
  ;

string:
    IDENTIFIER '(' STRING_LITERAL ')' {
        if (strcmp($1, "strlen") == 0) {
            int len = strlen($3);
            if ($3[0] == '"' && $3[len - 1] == '"') {
                $3[len - 1] = '\0';
                $$ = strdup($3 + 1);
            } else {
                $$ = strdup($3);
            }
        } else {
            yyerror("Unknown string function");
            $$ = strdup("");
        }
        free($1);
        free($3);
    }
  ;

%%

int main() {
    printf("Enter expression (e.g., u = sqrt(36), v = strlen(\"pune\")):\n");
    yyparse();
    return 0;
}

int yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 0;
}
